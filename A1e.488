{
	%Recursive functions, with and without parameters
	var count : Integer
	function countdown : Integer
	{
		if count = 0 then return with count
		count : = count - 1
		return with count + countdown 
	
	}
	function fib ( n : Integer ) : Integer
	{
		if n = 1 or n = 0
		then return with 1
		return with fib ( n - 1 ) + fib ( n - 2 )
	}
	%Recursive procedures, with and without parameters
	var tally : = Integer
	procedure tallyup
	{
		if tally = 10 then return
		tally : = tally + 1
		tallyup
		return
	}
	procedure helper
	{
		if count = 3 return
		procedure nested ( n : Integer )
		{
			if n = 3 return
			nested ( n + 1 )
			return
		}
		nested(count)
		return	
	}
	%Nested recursive function
	function sillyfactorial ( n : Integer )
	{
		function factorial ( x : Integer )
		{
			if x = 1 return with 1
			return with x * factorial ( x - 1 )
		}
		if n = 1 or n = 0 return with 1
		return with factorial ( n - 1 ) * sillyfactorial ( n - 2 )		
	}
	%Procedure and function calls
	tally : = 0
	count : = 10
	countdown
	fib ( 6 )
	tallyup
	count : = 0
	helper
	sillyfactorial(12)
}
