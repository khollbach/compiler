% George Gianacopoulos

% Test case (a)
% 'a program that uses all arithmetic, logical and comparison operators'


{
    % Convenience function for printing test result
    % Tests must be written such that they pass whenever testExpr is true
    procedure test(testExpr : Boolean)
    {
      if testExpr
      then
          write "PASS"
      else
          write "FAIL"

      write newline
      return
    }

    % BOOLEAN OPERATORS %
    write "TESTING BOOLEAN OPERATORS:", newline

    write "not: "
    test(not false)

    write "not: "
    test(not (not true))

    write "and: "
    test(true and true)

    write "and: "
    test(not (false and true))

    write "or: "
    test(false or true)

    write "or: "
    test(not (false or false))

    write "nested boolean expression: "
    test((false or true) and (not (false and false)))


    % COMPARISON OPERATORS %
    write newline, "TESTING COMPARISON OPERATORS:", newline

    write "equality: "
    test(1 = 1)

    write "inequality: "
    test(1 not = 2)

    write "less than: "
    test(1 < 2000)

    write "less than or equal: "
    test((1 < = 1) and (1 < = 32000))

    write "greater than: "
    test(2 > 1)

    write "greater than or equal: "
    test((4 > = 4) and (4 > = 3))

    write "conditional: "
    test((true ? true : false))


    % ARITHMETIC OPERATORS %
    write newline, "TESTING ARITHMETIC OPERATORS:", newline

    write "unary minus: "
    test(-1 = (0 - 1))

    write "addition: "
    test(-1 + 1 = 0)

    write "subtraction: "
    test(5 - 4 = 1)

    write "multiplication: "
    test((5 * 4 = 20) and (-5 * -4 = 20))

    write "division: "
    test((20 / 2 = 10) and (-21 / 2 = -10))
}
