// 2-3
PUSH 0
PUSH 0
PUSH 0
PUSH 0

// 2-4
PUSH MACHINE_FALSE
PUSH MACHINE_FALSE
PUSH MACHINE_FALSE

// 2-5
ADDR 0 0 // a
// b
ADDR 0 1
LOAD
// c
ADDR 0 2
LOAD
ADD      // b + c
// d
ADDR 0 3
LOAD
// c
ADDR 0 2
LOAD
MUL      // d * c
SUB      // b + c - d * c
// b
ADDR 0 1
LOAD
// c
ADDR 0 2
LOAD
DIV      // b / c
ADD      // b + c - d * c + b / c
STORE    // a:= b + c - d * c + b / c

// 2-6
ADDR 0 4 // p
PUSH MACHINE_FALSE // false
// not false
PUSH MACHINE_FALSE
EQ
// q
ADDR 0 5
LOAD
// r
ADDR 0 6
LOAD
MUL      // q and r
// not q and r
PUSH MACHINE_FALSE
EQ
OR       // not false or not q and r
STORE    // p= not false or not q and r

// 2-7
// p
ADDR 0 4
LOAD
PUSH machinecode046
BF
// a := 3
ADDR 0 0
PUSH 3
STORE

// 2-8
// p or not p
ADDR 0 4
LOAD
ADDR 0 4
LOAD
PUSH MACHINE_FALSE
EQ
OR
PUSH <2-8_else-block>
BF
// b:= 2
ADDR 0 1
PUSH 2
STORE
PUSH machinecode063
BR
// b:= 0 line 8 else block
ADDR 0 1                               // <2-8_else-block>
PUSH 0
STORE

// 2-9
// while c < 7 do
ADDR 0 2
LOAD
PUSH 7
LT
PUSH machinecode074
BF
// c := 6
ADDR 0 3
PUSH 6
STORE
PUSH machinecode063
BR

// 2-10
// while true do
PUSH MACHINE_TRUE
PUSH machinecode085
BF
// b := b + 1
ADDR 0 2
ADDR 0 2
LOAD
PUSH 1
ADD
STORE
PUSH machinecode074
BR

// 2-11
// repeat
// a := 3
ADDR 0 0
PUSH 3
STORE
// exit
PUSH machinecode096
BR
// b := 7
ADDR 0 1
PUSH 7
STORE
// until false
PUSH MACHINE_FALSE
PUSH machinecode085
BF

// 2-12
// while q or r and not p do exit when b not = 10
// q or r and not p
ADDR 0 5
LOAD
ADDR 0 6
LOAD
ADDR 0 4
LOAD
PUSH MACHINE_FALSE
EQ
MUL
OR
PUSH machinecode120
BF
// b not = 10 ...is this even correct?
ADDR 0 1
LOAD
PUSH 10
EQ
PUSH MACHINE_FALSE
EQ
// when b not = 10
PUSH MACHINE_FALSE
EQ
PUSH machinecode120
BF
PUSH machinecode096
BR

// 2-13
// write "Value is ", a / b, "or not ", newline
PUSH 'V'
PRINTC
PUSH 'a'
PRINTC
PUSH 'l'
PRINTC
PUSH 'u'
PRINTC
PUSH 'e'
PRINTC
PUSH ' '
PRINTC
PUSH 'i'
PRINTC
PUSH 's'
PRINTC
PUSH ' '
PRINTC
// a / b
ADDR 0 0
LOAD
ADDR 0 1
LOAD
DIV
PRINTI
// or not
PUSH ' '
PRINTC
PUSH 'o'
PRINTC
PUSH 'r'
PRINTC
PUSH ' '
PRINTC
PUSH 'n'
PRINTC
PUSH 'o'
PRINTC
PUSH 't'
PRINTC
PUSH ' '
PRINTC
PUSH '\n'
PRINTC

// 2-14
// read a, c, b
ADDR 0 0
READI
STORE
ADDR 0 2
READI
STORE
ADDR 0 1
READI
STORE

// 2-15
// open scope TODO

// 2-16
// var a, b, c : Boolean
PUSH MACHINE_FALSE
PUSH MACHINE_FALSE
PUSH MACHINE_FALSE

// 2-17
// a := not p or q
ADDR 1 0
ADDR 0 4
LOAD
PUSH MACHINE_FALSE
EQ
ADDR 0 5
LOAD
OR
STORE

// 2-18
// open scope TODO

// 2-19
// var p, q, r : INTEGER
PUSH 0
PUSH 0
PUSH 0

// 2-20
// p := (b ? q : r)
ADDR 2 0
ADDR 1 1
LOAD
PUSH thisaddr+6    // address for next ADDR 2 2
BF
ADDR 2 1
LOAD
PUSH thisaddr+4    // address for next STORE
BR
ADDR 2 2
LOAD
STORE

// 2-21
// close scope TODO

// 2-22
// close scope TODO

// 2-23
PUSH MACHINE_TRUE
PUSH someaddr
BF
// open scope, perhaps

// 2-24
ADDR 0 4
LOAD
ADDR 0 6
LOAD
OR
PUSH continue_loop_addr
BF
// <close scope maybe>
PUSH end_loop_addr
BR

// 2-25
// <open scope maybe>, <declare variables maybe>

// 2-26

// 2-27
// w
ADDR 2 0
LOAD
// a
ADDR 0 0
LOAD
// w <= a <==> not (a < w)
SWAP
LT
PUSH MACHINE_FALSE
EQ
PUSH continue_loop_addr_2
BF
// <close scope maybe>
PUSH end_loop_addr_2
BR
//continue_loop_addr2

// 2-28
// p or q or r
ADDR 0 4 // THIS ADDRESS REFERENCED BY 2-33 code
LOAD
ADDR 0 5
LOAD
OR
ADDR 0 6
LOAD
OR
// end while if ^ false
PUSH end_loop_addr_3
BF

// 2-29
// <open scope maybe>, <declare variables maybe>
// 2-30

// 2-31
// p := not q
ADDR 0 4
ADDR 0 5
PUSH MACHINE_FALSE
EQ
STORE

// 2-32
// t := (p or q ? t + 1 : t - 1)
ADDR 3 0
// p or q
ADDR 0 4
LOAD
ADDR 0 5
LOAD
OR
PUSH someaddr
BF
ADDR 3 0
LOAD
PUSH 1
ADD
PUSH endaddr
BR
ADDR 3 0 // someaddr is here
LOAD
PUSH 1
SUB
STORE // endaddr is here

// 2-33
// exit 3 when t > 12
ADDR 3 0
LOAD
PUSH 12
SWAP
LT
PUSH continueloop // REFERENCES top of 2-28 code
BF
// exit 3 code. close some scopes. TODO
PUSH lastlineaddress
BR

// 2-34
// perhaps close scopes

// 2-35
// exit 2
