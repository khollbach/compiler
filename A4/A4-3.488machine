// 3-2
// <open major scope>
// 3-3
// <declare variables>
PUSH 0
PUSH 0
PUSH 0
PUSH 0

PUSH MACHINE_FALSE
PUSH MACHINE_FALSE
PUSH MACHINE_FALSE
PUSH MACHINE_FALSE

// 3-5
// <declare procedure> TODO

// 3-7
// <declare variables>
PUSH 0
PUSH 0

// 3-8
ADDR 0 5 // q
LOAD
PUSH <addr 3-9>
BF
// <return from procedure> TODO

// 3-9
ADDR 1 0 // e
ADDR 0 0 // a
LOAD
STORE

// 3-10
// <return from procedure> TODO

// 3-11
// <close major scope>

// 3-12
// <declare function> TODO

// 3-13
// <open major scope>

// 3-14
ADDR 1 1 // n
LOAD
PUSH <addr 3-15>
BF
ADDR 1 0 // m
LOAD
ADDR 0 1 // b
LOAD
ADD
// <return from function> TODO
PUSH <addr 3-16>
BR

// 3-15
ADDR 0 2 // c
LOAD
ADDR 1 0 // m
LOAD
SUB
// <return from function> TODO

// 3-16
// <close major scope>

// 3-17
// <declare procedure> TODO

// 3-18
// <open major scope>

// 3-19
// <declare variables maybe>
PUSH 0
PUSH 0
PUSH 0

// 3-20
// <declare function> TODO

// 3-21
// <open major scope>

// 3-22
// <declare variables maybe>
PUSH 0
PUSH 0

// 3-23, 3-24
ADDR 1 0 // m
LOAD
ADDR 1 2 // p
LOAD
OR
PUSH <addr 3-24-else-expr>
BF
// 3-24-then-expr:
ADDR 1 5 // v
LOAD
ADDR 1 1 // n
LOAD
ADD
PUSH <addr 3-25>
BR
// 3-24-else-expr:
ADDR 1 4 // u
LOAD
ADDR 0 1 // b
LOAD
SUB

// 3-25
// <close scope>

// 3-26
// <function call> TODO
PUSH 7
LT
PUSH <addr 3-27>
BF
// <return from procedure> TODO

// 3-27
ADDR 1 3 // t
LOAD
ADDR 0 6 // r
PUSH MACHINE_FALSE
EQ
// <function call> TODO
PUSH 17
EQ
PUSH <addr 3-28>
BF
// <return from procedure> TODO

// 3-28
// <procedure call> TODO

// 3-29
// <close major scope>

// 3-30
ADDR 0 4 // p
LOAD
PUSH MACHINE_FALSE
EQ
ADDR 0 5 // q
LOAD
OR
ADDR 0 1 // b
LOAD
ADDR 0 2 // c
LOAD
MUL
ADDR 0 4 // p
LOAD
ADDR 0 5 // q
LOAD
EQ
PUSH MACHINE_FALSE
EQ
// <procedure call> TODO

// 3-31
// <close major scope>
HALT
