// 2-3                                 
PUSH 0                                 // machinecode000
PUSH 0                                 // machinecode001
PUSH 0                                 // machinecode002
PUSH 0                                 // machinecode003

// 2-4
PUSH MACHINE_FALSE                     // machinecode004
PUSH MACHINE_FALSE                     // machinecode005
PUSH MACHINE_FALSE                     // machinecode006

// 2-5
ADDR 0 0 // a                          // machinecode007
// b
ADDR 0 1                               // machinecode008
LOAD                                   // machinecode009
// c
ADDR 0 2                               // machinecode010
LOAD                                   // machinecode011
ADD      // b + c                      // machinecode012
// d
ADDR 0 3                               // machinecode013
LOAD                                   // machinecode014
// c
ADDR 0 2                               // machinecode015
LOAD                                   // machinecode016
MUL      // d * c                      // machinecode017
SUB      // b + c - d * c              // machinecode018
// b
ADDR 0 1                               // machinecode019
LOAD                                   // machinecode020
// c
ADDR 0 0                               // machinecode021
LOAD                                   // machinecode022
DIV      // b / c                      // machinecode023
ADD      // b + c - d * c + b / c      // machinecode024
STORE    // a:= b + c - d * c + b / c  // machinecode025

// 2-6
ADDR 0 4 // p                          // machinecode026
PUSH MACHINE_FALSE // false            // machinecode027
// not false
PUSH MACHINE_FALSE                     // machinecode028
EQ                                     // machinecode029
// q
ADDR 0 4                               // machinecode030
LOAD                                   // machinecode031
// r
ADDR 0 5                               // machinecode032
LOAD                                   // machinecode033
MUL      // q and r                    // machinecode034
// not q and r
PUSH MACHINE_FALSE                     // machinecode035
EQ                                     // machinecode036
OR       // not false or not q and r   // machinecode037
STORE    // p= not false or not q and r// machinecode038

// 2-7
// p
ADDR 0 3                               // machinecode039
LOAD                                   // machinecode040
PUSH machinecode046                    // machinecode041
BF                                     // machinecode042
// a := 3
ADDR 0 0                               // machinecode043
PUSH 3                                 // machinecode044
STORE                                  // machinecode045

// 2-8
// p or not p
ADDR 0 3                               // machinecode046
LOAD                                   // machinecode047
ADDR 0 3                               // machinecode048
LOAD                                   // machinecode049
PUSH MACHINE_FALSE                     // machinecode050
EQ                                     // machinecode051
OR                                     // machinecode052
PUSH machinecode060                    // machinecode053
BF                                     // machinecode054
// b:= 2              
ADDR 0 1                               // machinecode055
PUSH 2                                 // machinecode056
STORE                                  // machinecode057
PUSH machinecode063                    // machinecode058
BR                                     // machinecode059
// b:= 0
ADDR 0 1                               // machinecode060
PUSH 0                                 // machinecode061
STORE                                  // machinecode062

// 2-9
// while c < 7 do
ADDR 0 2                               // machinecode063
LOAD                                   // machinecode064
PUSH 7                                 // machinecode065
LT                                     // machinecode066
PUSH machinecode074                    // machinecode067
BF                                     // machinecode068
// c := 6
ADDR 0 3                               // machinecode069
PUSH 6                                 // machinecode070
STORE                                  // machinecode071
PUSH machinecode063                    // machinecode072
BR                                     // machinecode073

// 2-10
// while true do
PUSH MACHINE_TRUE                      // machinecode074
PUSH machinecode085                    // machinecode075
BF                                     // machinecode076
// b := b + 1
ADDR 0 2                               // machinecode077
ADDR 0 2                               // machinecode078
LOAD                                   // machinecode079
PUSH 1                                 // machinecode080
ADD                                    // machinecode081
STORE                                  // machinecode082
PUSH machinecode074                    // machinecode083
BR                                     // machinecode084

// 2-11
// repeat
// a := 3
ADDR 0 0                               // machinecode085
PUSH 3                                 // machinecode086
STORE                                  // machinecode087
// exit
PUSH machinecode096                    // machinecode088
BR                                     // machinecode089
// b := 7
ADDR 0 1                               // machinecode090
PUSH 7                                 // machinecode091
STORE                                  // machinecode092
// until false
PUSH MACHINE_FALSE                     // machinecode093
PUSH machinecode085                    // machinecode094
BF                                     // machinecode095

// 2-12
// while q or r and not p do exit when b not = 10
// q or r and not p 
ADDR 0 5                               // machinecode096
LOAD                                   // machinecode097
ADDR 0 6                               // machinecode098
LOAD                                   // machinecode099
ADDR 0 4                               // machinecode100
LOAD                                   // machinecode101
PUSH MACHINE_FALSE                     // machinecode102
EQ                                     // machinecode103
MUL                                    // machinecode104
OR                                     // machinecode105
PUSH machinecode120                    // machinecode106
BF                                     // machinecode107
// b not = 10 ...is this even correct?
ADDR 0 1                               // machinecode108
LOAD                                   // machinecode109
PUSH 10                                // machinecode110
EQ                                     // machinecode111
PUSH MACHINE_FALSE                     // machinecode112
EQ                                     // machinecode113
// when b not = 10
PUSH MACHINE_FALSE                     // machinecode114
EQ                                     // machinecode115
PUSH machinecode120                    // machinecode116
BF                                     // machinecode117
PUSH machinecode096                    // machinecode118
BR                                     // machinecode119

// 2-13
// write "Value is ", a / b, "or not ", newline
PUSH 'V'
PRINTC
PUSH 'a'
PRINTC
PUSH 'l'
PRINTC
PUSH 'u'
PRINTC
PUSH 'e'
PRINTC
PUSH ' '
PRINTC
PUSH 'i'
PRINTC
PUSH 's'
PRINTC
PUSH ' '
PRINTC
// a / b
ADDR 0 0
LOAD
ADDR 0 1
LOAD
DIV
PRINTI
// or not
PUSH ' '
PRINTC
PUSH 'o'
PRINTC
PUSH 'r'
PRINTC
PUSH ' '
PRINTC
PUSH 'n'
PRINTC
PUSH 'o'
PRINTC
PUSH 't'
PRINTC
PUSH ' '
PRINTC
PUSH '\n'
PRINTC

// 2-14
// read a, c, b
ADDR 0 0
READI
STORE
ADDR 0 2
READI
STORE
ADDR 0 1
READI
STORE

// 2-15
// open scope TODO

// 2-16
// var a, b, c : Boolean
PUSH MACHINE_FALSE
PUSH MACHINE_FALSE
PUSH MACHINE_FALSE

// 2-17
// a := not p or q
ADDR 1 0
ADDR 0 4
LOAD
PUSH MACHINE_FALSE
EQ
ADDR 0 5
LOAD
OR
STORE

// 2-18
// open scope TODO

// 2-19
// var p, q, r : INTEGER
PUSH 0 
PUSH 0
PUSH 0

// 2-20
// p := (b ? q : r)
ADDR 2 0
ADDR 1 1
LOAD
PUSH thisaddr+6    // address for next ADDR 2 2
BF
ADDR 2 1
LOAD
PUSH thisaddr+4    // address for next STORE
BR
ADDR 2 2
LOAD
STORE

// 2-21
// close scope TODO

// 2-22
// close scope TODO

// 2-23
PUSH MACHINE_TRUE
PUSH someaddr
BF
// open scope, perhaps

// 2-24
ADDR 0 4
LOAD
ADDR 0 6
LOAD
OR
PUSH continue_loop_addr
BF
// <close scope maybe>
PUSH end_loop_addr
BR

// 2-25
// <open scope maybe>, <declare variables maybe>

// 2-26

// 2-27
// w
ADDR 2 0
LOAD
// a
ADDR 0 0
LOAD
// w <= a <==> not (a < w)
SWAP
LT
PUSH MACHINE_FALSE
EQ
PUSH continue_loop_addr_2
BF
// <close scope maybe>
PUSH end_loop_addr_2
BR
//continue_loop_addr2

// 2-28
// p or q or r
ADDR 0 4 // THIS ADDRESS REFERENCED BY 2-33 code 
LOAD
ADDR 0 5
LOAD
OR
ADDR 0 6
LOAD
OR
// end while if ^ false
PUSH end_loop_addr_3
BF

// 2-29
// <open scope maybe>, <declare variables maybe>
// 2-30

// 2-31
// p := not q
ADDR 0 4
ADDR 0 5
PUSH MACHINE_FALSE
EQ
STORE

// 2-32
// t := (p or q ? t + 1 : t - 1)
ADDR 3 0
// p or q
ADDR 0 4
LOAD
ADDR 0 5
LOAD
OR
PUSH someaddr
BF
ADDR 3 0
LOAD
PUSH 1
ADD
PUSH endaddr
BR
ADDR 3 0 // someaddr is here
LOAD
PUSH 1
SUB
STORE // endaddr is here

// 2-33
// exit 3 when t > 12
ADDR 3 0
LOAD
PUSH 12
SWAP
LT
PUSH continueloop // REFERENCES top of 2-28 code
BF
// exit 3 code. close some scopes. TODO
PUSH lastlineaddress
BR

// 2-34
// perhaps close scopes

// 2-35
// exit 2


















                        







          







