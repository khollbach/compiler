{
    var count : Integer
    var tally : Integer
    var temp : Integer

    function countdown : Integer
    {
        if count <= 0 then return with count
        count := count - 1
        return with count + countdown
    }

    function fib(n : Integer) : Integer
    {
        if n <= 1 then return with n
        return with fib(n - 1) + fib(n - 2)
    }

    procedure tallyup
    {
        if tally >= 10 then return
        tally := tally + 1
        tallyup
        return
    }

    procedure nested
    {
        function helper(n : Integer) : Integer
        {
            if n >= 3 then return with n
            return with helper(n + 1)
        }

        temp := helper(temp)
        return
    }

    function sillyfact(n : Integer) : Integer
    {
        function factorial(x : Integer) : Integer
        {
            if x <= 1 then return with 1
            return with x * factorial(x - 1)
        }

        write "Factorial of ", n, " is ", factorial(n), ".", newline
        if n <= 1 then return with 1
        return with factorial(n) / factorial(n - 1) * sillyfact(n - 1)
    }

    count := 10
    write "Should be 55: ", countdown, newline

    write "Should be 21: ", fib(6), newline

    tally := 0
    tallyup
    write "Should be 10: ", tally, newline

    temp := 0
    nested
    write "Should be 3: ", temp, newline

    write "Should be 5040: ", sillyfact(7), newline
}
